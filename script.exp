#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Sep 28 19:42:52 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "~/seandavis.sh # \[6n"
send -- "\[29;18Rhell"
expect -exact "\[J"
send -- ""
expect -exact "\[J"
send -- ""
expect -exact "\[J"
send -- ""
expect -exact "\[J"
send -- "echo \"hello world\"\r"
expect -exact "echo \"hello world\"\r
hello world\r
~/seandavis.sh # \[6n"
send -- "\[29;18Rsleep 2\r"
expect -exact "sleep 2\r
~/seandavis.sh # \[6n"
send -- "\[29;18Rvi\r"
expect -exact "vi\r
\[?1049h\[H\[J\[2;1H~\[3;1H~\[4;1H~\[5;1H~\[6;1H~\[7;1H~\[8;1H~\[9;1H~\[10;1H~\[11;1H~\[12;1H~\[13;1H~\[14;1H~\[15;1H~\[16;1H~\[17;1H~\[18;1H~\[19;1H~\[20;1H~\[21;1H~\[22;1H~\[23;1H~\[24;1H~\[25;1H~\[26;1H~\[27;1H~\[28;1H~\[1;1H\[29;1H\[K- No file 1/1 100%\[1;1H"
send -- "i"
expect -exact "\[1;1H\[29;1H\[KI No file 1/1 100%\[1;1H"
send -- "a"
expect -exact "\[1;1Ha\[1;2H"
send -- "b"
expect -exact "\[1;2Hb\[1;3H"
send -- ":"
expect -exact "\[29;1H\[K- No file \[Modified\] 1/1 100%\[1;3H\[29;1H\[K:"
send -- "wq\r"
expect -exact "\[1;2H\[1;2H\[29;1H\[K\[7mNo current filename\[m\[1;2H"
send -- ":"
expect -exact "\[29;1H\[K- No file \[Modified\] 1/1 100%\[1;2H\[29;1H\[K:"
send -- "q!\r"
expect -exact "\[1;2H\[1;2H\[29;1H\[K- No file \[Modified\] 1/1 100%\[1;2H\[29;1H\[K\[?1049l~/seandavis.sh # \[6n"
send -- "\[29;18Rexit\r"
expect eof
